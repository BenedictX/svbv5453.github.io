[{"title":"linux学习笔记","date":"2017-02-26T11:20:52.000Z","path":"2017/02/26/linux学习笔记/","text":"Linux介绍 linux常用的命令","tags":[]},{"title":"图片服务器nginx","date":"2017-02-23T12:46:58.000Z","path":"2017/02/23/图片服务器nginx/","text":"Nginx指南1、Nginx简介​ Nginx是一个使用c语言开发的高性能的http服务器，可以作为图片等静态资源的服务器，单个nginx服务器可以达到5万的并发。 2、Nginx应用场景 http服务器： 虚拟主机： 反向代理，负载均衡 3、安装配置 安装环境：需要安装在linux下，否则无法达到大的并发 安装步骤：需要先安装以下文件 gcc PCRE zlib openssl","tags":[]},{"title":"mybatis学习总结","date":"2017-02-22T12:37:08.000Z","path":"2017/02/22/mybatis学习总结/","text":"1、分页插件PageHelper 功能：用于mybaits分页查询 原理：在执行sql语句之前，将sql语句取出，添加分页信息，在将sql语句设置回去，最后执行sql语句，并返回查询结果，查询结果包含了分页信息 使用方法： 1.添加maven依赖或jar包； 1234567&lt;!--添加mybatis的分页插件--&gt; &lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;4.1.6&lt;/version&gt; &lt;/dependency&gt; ​ 2.在SqlMapConfig.xml里面配置Plugin； 1234567&lt;!--添加分页插件--&gt; &lt;plugins&gt; &lt;plugin interceptor=\"com.github.pagehelper.PageHelper\"&gt; &lt;property name=\"dialect\" value=\"mysql\"/&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;mappers&gt; 注： 标签的顺序有要求 3.在执行语句之前，添加 1PageHelper.startPage(page,rows); 4.取出分页结果。创建一个PageInof对象，将查询结果返回的list传入。从PageInfo中取得分页结果。 ​ 主要事项：需要配合ssm的版本 2、mybatis-generator逆向工程通过逆向工程生成po、mapper接口和mapper.xml;使用方法 在maven里面添加mybatis-generator插件；pom.xml 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.sh.mybatis&lt;/groupId&gt; &lt;artifactId&gt;generator&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- 添加mybatis依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加mysql驱动依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.29&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--mybatis逆向工程依赖包--&gt; &lt;build&gt; &lt;finalName&gt;test&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 ​* 在资源目录下写配置文件generator.xml； ```bash &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.sh.mybatis&lt;/groupId&gt; &lt;artifactId&gt;generator&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- 添加mybatis依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加mysql驱动依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.29&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--mybatis逆向工程依赖包--&gt; &lt;build&gt; &lt;finalName&gt;test&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; ``` db.properties; ````bash jdbc.driver=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/taotao jdbc.username=root jdbc.password=123456 jdbc.driverLocation=E:/Program Files/maven/LocalRepository/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar jdbc.pojoLocation=com.sh.ssm.taotao.po jdbc.mapperLocation=com.sh.ssm.taotao.mapper 在Intellij IDEA添加一个“Run运行”选项，使用maven运行mybatis-generator-maven-plugin插件 ：之后弹出运行配置框，为当前配置配置一个名称，这里其名为”generator”,然后在 “Command line” 选项中输入“mybatis-generator:generate -e”这里加了“-e ”选项是为了让该插件输出详细信息，这样可以帮助我们定位问题。 双击运行mybatis-generator:generate即可。 注： 逆向工程自动生成的Example类的作用 Example类用于构造复杂的筛选条件 基本概念 CriterionCriterion是最基本,最底层的Where条件，用于字段级的筛选，feild用于指代字段名字,列举如下:只有一个条件,不需要其他参考值feild IS NOLLfeild IS NOT NULL与一个参考值进行算数运算feild &gt; valuefeild &gt;= valuefeild = valuefeild &lt;&gt; valuefeild &lt;= valuefeild &lt; value与一个参考值进行模糊查询,参值中的%,?只能在构造查询条件时手动指定。 feild LIKE valuefeild NOT LIKE value介于两个参考值之间 feild BETWEEN value AND secondValue在或不在一个参考值集合中,item来自于value集合 feild IN (item,item,item,…)feild NOT IN (item,item,item,…)MyBatis Generator会为每个字段产生如上的Criterion，如果表的字段比较多,产生的Example类会十分庞大。理论上通过Example类可以构造你想到的任何筛选条件。 CriteriaCriteria包含一个Cretiron的集合,每一个Criteria对象内包含的Cretiron之间是由AND连接的,是逻辑与的关系。 oredCriteriaExample内有一个成员叫oredCriteria,是Criteria的集合,就想其名字所预示的一样，这个集合中的Criteria是由OR连接的，是逻辑或关系。oredCriteria就是ORed Criteria。 逆向工程生成的mapper必须在pom.xml里面进行配置，防止访问不到 12345678910111213&lt;build&gt; &lt;!--下面这个resouces为了生成的*mapper.xml文件在java/src/com.*文件夹中能够访问到 但是必须要在generator运行完之后在添加，否则运行generator的时候会报错db.properties找不到--&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;finalName&gt;taotao&lt;/finalName&gt; &lt;/build&gt; ​","tags":[]},{"title":"物流管理系统学习笔记","date":"2017-02-15T13:10:45.000Z","path":"2017/02/15/物流管理系统学习笔记/","text":"物流管理系统学习安排物流管理系统开发概述 项目概述 本项目是一个物流项目，即bos(business operating system) 搭建开发环境（数据库，web后台，git管理项目，maven构建） 页面设计 常见的软件类型 OA：办公自动系统 CRM：客户关系管理系统 ERP：企业资源计划平台，很大 CMS：内容管理系统 软件开发流程瀑布模型 可行性分析 需求分析：撰写需求说明书 系统设计(概要设计，详细设计)：数据库设计、原型设计，撰写数据库说明书 编码阶段：(编码人员需要做单元测试) 测试阶段：系统测试 上线和维护： 敏捷开发(项目常用)​ 将一个系统分成很多小模块，每一个模块都使用瀑布模型进行开发：房地产开发 开发环境 类别 开发环境 产品环境 操作系统 Windows 开发 Intellij IDEA 数据库 Mysql5.0 Web容器 Tomcat8.0 Java版本 jdk1.8 浏览器 谷歌 使用的技术 标号 工具 版本号 说明 1 spring 2 spring mvc 3 mybaits 4 Junit 5 jQuery js框架 6 Apache Shiro 权限管理框架 7 activity 工作流 项目启动搭建开发环境 数据库设计 创建数据库； 创建一个用户zhangsan：123456，并为该用户授权","tags":[]},{"title":"maven入门教程","date":"2017-02-13T12:00:15.000Z","path":"2017/02/13/maven入门教程/","text":"Maven学习总结什么是Maven？ Maven是一个项目管理工具，提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。 Maven的主要功能​ Maven的主要功能是：项目构建；项目依赖管理；软件项目持续集成；版本管理；项目的站点描述信息管理； 依赖的管理：仅仅通过jar包的几个属性，就能确定唯一的jar包，在指定的文件pom.xml中，只要写入这些依赖属性，就会自动下载并管理jar包。 项目的构建：内置很多的插件与生命周期，支持多种任务，比如校验、编译、测试、打包、部署、发布… 项目的知识管理：管理项目相关的其他内容，比如开发者信息，版本等等 Maven的环境搭建 环境搭建教程 使用Maven + Intellij IDEA2016.2搭建web项目 搭建ssm项目Maven的学习指南 Maven教程 参考文献 Maven日常——你应该知道的一二三 SSM框架整合（IntelliJ IDEA + maven + Spring + SpringMVC + MyBatis）","tags":[]},{"title":"项目管理流程剖析","date":"2017-02-13T11:38:54.000Z","path":"2017/02/13/项目管理流程剖析/","text":"项目管理项目开发的基本流程 项目需求：产品经理根据用户的需求撰写项目需求说明书 系统架构设计： 架构师根据项目需求说明书撰写项目系统设计说明书; 数据库设计师根据项目需求说明书设计数据库，并撰写数据库关系说明书 开发人员编码：开发人员根据架构师分配的任务进行开发工作，并做好自己测试代码 测试： 人工测试：测试人员对开发人员的代码进行测试； 系统测试：系统部署完成后进行自动化测试 发布项目，项目上线 运维人员维护项目 项目开发的方式 敏捷开发 敏捷开发的框架和工具： 框架：scrum,xp 工具：leangoo，禅道 项目构建工具 maven gradle ​ 参考文献","tags":[]},{"title":"Typora For markdown语法","date":"2017-02-12T03:39:04.661Z","path":"2017/02/12/Typora For markdown语法/","text":"[TOC] 推荐阅读 &lt;&lt;认识与入门MarkDown&gt;&gt; 《解决作者们的焦虑：7 款优秀 Markdown 编辑工具推荐》 数学表达式下标下标使用包裹 H~2~O 使用方法：使用~包裹，不起作用 上标上标使用^包裹 y^2^=4 使用方法：使用^包裹，不起作用 插入表情:haha::broken_heart: 使用方法：:happy 下划线下划线 使用方法：使用包裹 删除线~删除线~不起作用 使用方法：使用~包裹 代码printf() 123public class HelloWorld&#123; System.out.println(\"hello world\");&#125; 使用方法：使用`包裹生成代码， 使用````回车可以输入代码段，并可以选择语言 强调强调 使用方法：使用 两个星号包裹 斜体斜体* 使用方法：使用 包裹 插入图片小狗狗 插入url链接友情链接：百度 使用方法：使用&lt;&gt;包裹，但好像不起作用 目录列表Table of contents（toc）使用方法：输入[toc]回车产生一个目录，抽取文章的所有标题 水平分割线 使用方法：使用*，然后回车 标注此处应有注释^1 表格 姓名 性别 毕业学校 工资 张三 男 西电 14000 使用方法：格式是|姓名|性别|毕业学校|工资|，然后回车 任务列表爱好 [x] 吃饭 [ ] 睡觉 [ ] 打豆豆 使用方法：- [ ] 吃饭，-后空格加[] 列表无序列表 xx 你最 棒 ​ 有序列表 苹果 香蕉 梨 使用方法：使用*，+，-创建无序列表，使用任意数字创建有序列表 块引用 这是一个块引用 使用方法：使用&gt;来插入块引用 标题使用方法：使用#表示标题，一个#表示一级标题，总共6个标题 [^注释]:","tags":[]},{"title":"hexo+github搭建个人博客","date":"2017-02-11T08:15:47.000Z","path":"2017/02/11/hexo+github搭建个人博客/","text":"摘要： Hexo是一款基于Nodejs的静态博客框架，hexo github链接. [TOC] 快速入门环境搭建 git安装官网，作用：把本地的hexo内容提交到github上面 Node.js安装官网，作用：用来生成静态页面 github账号申请官网，并配置github作用：用来做博客的远程创建库，域名，服务器之类 申请账号 创建仓库:仓库名svbv5453.github.io 配置秘钥： ssh-keygen -t rsa -C “你的邮箱地址”，按3个回车，密码为空。 在C:\\Users\\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub。 ​ 在github里面添加秘钥：打开id_rsa.pub，复制全文。https://github.com/settings/ssh ，Add SSH key，粘贴进去。 hexo安装官网，作用：静态博客框架 验证安装是否正确： git –version node -v npm -v Hexo安装 在本地创建文件夹如：blog，在该文件夹下使用git进行hexo安装 为了避免被墙，使用淘宝NPM镜像安装，安装命令： 12&gt;$ npm install -g cnpm --registry=https://registry.npm.taobao.org&gt; 使用淘宝NPM安装Hexo， 12&gt; $ cnpm install -g hexo-cli&gt; 将hexo安装到本地 12&gt; $ cnpm install hexo --save&gt; 验证安装是否成功 12&gt; $ hexo -v&gt; 本地运行Hexo 初始化hexo $ hexo init 生成静态页面 $ hexo generate(或者hexo g) 本地启动服务 $ hexo server 调试：地址栏输入：http:localhost:4040,以后使用https://svbv5453.github.io/ ​ 运行hexo，以后本地只需输入该命令即可 $ hexo d -g 管理博客 更改配置信息 保存更改：命令如下（安装hexo git插件） 12&gt; $ cnpm install hexo-deployer-git --save&gt; 主题推荐 Cover- A chic theme with facebook-like cover photo Oishi- A white theme based on Landscape plus and Writing. Sidebar- Another theme based on Light with a simple sidebar TKL- A responsive design theme for Hexo. 一个设计优雅的响应式主题 Tinnypp- A clean, simple theme based on Tinny Writing- A small and simple hexo theme based on Light Yilia- Responsive and simple style 优雅简洁响应式主题，我用得就是这个。 Pacman voidy- A theme with dynamic tagcloud and dynamic snow 写博文 使用命令创建一个：博文名称为“hexo+github搭建个人博客” $ hexo new “hexo+github搭建个人博客” 使用Typora编辑器编辑hello.md 发布更新博客：命令 $ hexo d -g 博文格式123456789101112title: hellodate: 2015-07-01 22:37:23categories: - 日志 - 二级目录tags: - hello---摘要:&lt;!--more--&gt; #以下内容会被隐藏起来正文: PS: 博文所有图片均存放在七牛云 参考文献 零基础免费搭建个人博客-hexo+github HEXO+Github,搭建属于自己的博客 手把手教你建github技术博客","tags":[{"name":"blog","slug":"blog","permalink":"http://svbv5453.github.io/tags/blog/"}]},{"title":"Hello World","date":"2017-02-11T05:40:38.446Z","path":"2017/02/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]